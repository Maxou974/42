// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id       Int    @id
    email    String @unique
    username String @unique
    realname String @unique
	description String?

    hashedRt String?

    isTwoFAEnable Boolean @default(false)
    twoFASecret   String?

    score Int @default(2000)
    win   Int @default(0)
    loose Int @default(0)

    friends         User[] @relation("friends")
    friendsRelation User[] @relation("friends")

    sentFriendRequests     FriendRequest[] @relation("SentFriendRequests")
    receivedFriendRequests FriendRequest[] @relation("ReceivedFriendRequests")

    blocked   BlockedUser[] @relation("BlockedBy")
    blockedBy BlockedUser[] @relation("Blocked")

    conversationInitiated Conversation[] @relation("convInitiated")
    conversationReceived  Conversation[] @relation("convReceived")

    directMessages DirectMessage[]

    sentGameInvites     GameInvite[] @relation("SentGameInvites")
    receivedGameInvites GameInvite[] @relation("ReceivedGameInvites")

    matchHistoryP1 MatchHistoryItem[] @relation("MatchHistoryP1")
    matchHistoryP2 MatchHistoryItem[] @relation("MatchHistoryP2")
	channelMember ChannelMember[]

    @@map("users")
}

model GameInvite {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())

    acceptedInvite Boolean @default(false)

    senderId Int
    sender   User @relation("SentGameInvites", fields: [senderId], references: [id])

    receiverId Int?
    receiver   User? @relation("ReceivedGameInvites", fields: [receiverId], references: [id])

    gameMode String @default("classic")

    @@index([senderId, receiverId])
}

model RunningGame {
	id        Int      @id @default(autoincrement())

    player1Id  Int @default(0)
    player2Id  Int @default(0)

    gameMode String @default("classic")
}

model MatchHistoryItem {
    id Int @id @default(autoincrement())

	winnerId Int?

    player1Id Int
    player1   User @relation("MatchHistoryP1", fields: [player1Id], references: [id])
    player1Score Int @default(0)

    player2Id Int
    player2   User @relation("MatchHistoryP2", fields: [player2Id], references: [id])
    player2Score Int @default(0)

    gameMode String @default("classic")
}

model Channel {
    id Int @id @default(autoincrement())

	channelName String
    password String?

    mode ChannelMode @default(PRIVATE)

	members ChannelMember[]
	messages ChannelMessage[]
}

model ChannelMember {
    id Int @id @default(autoincrement())

	user User @relation(fields: [userId], references: [id])
    userId Int

	role ChannelRole @default(NONADMIN)
	state ChannelMemberState @default(REGULAR)

	muteDate DateTime?

	channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
	channelId Int

	channelMessages ChannelMessage[]
}

enum ChannelMemberState {
	REGULAR
	BANNED
	MUTED
	KICKED
}

enum ChannelRole {
	OWNER
	ADMIN
	NONADMIN
}

enum ChannelMode {
    PUBLIC
    PRIVATE
    PROTECTED
}

model Achievments {
    title String @unique
    body  String
}

model FriendRequest {
    id     Int    @id @default(autoincrement())
    status String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    sender   User @relation("SentFriendRequests", fields: [senderId], references: [id])
    senderId Int

    receiver   User @relation("ReceivedFriendRequests", fields: [receiverId], references: [id])
    receiverId Int

    @@index([senderId, receiverId])
}

model BlockedUser {
    id        Int      @id @default(autoincrement())
    timestamp DateTime @default(now())

    user   User @relation("BlockedBy", fields: [userId], references: [id])
    userId Int

    blockedUser   User @relation("Blocked", fields: [blockedUserId], references: [id])
    blockedUserId Int

    @@index([userId, blockedUserId])
}

model Conversation {
    id Int @id @default(autoincrement())

    memberOneId Int
    memberOne   User @relation("convInitiated", fields: [memberOneId], references: [id])

    memberTwoId Int
    memberTwo   User @relation("convReceived", fields: [memberTwoId], references: [id])

    directMessages DirectMessage[]

    @@unique([memberOneId, memberTwoId])
}

model DirectMessage {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())

    content   String
    isBlocked Boolean @default(false)
    isRead    Boolean @default(false)

    senderId Int
    sender   User @relation(fields: [senderId], references: [id])

    conversationId Int
    conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model ChannelMessage {
	id Int @id @default(autoincrement())
	createdAt DateTime @default(now())

    content   String

	senderId Int
    sender   ChannelMember @relation(fields: [senderId], references: [id], onDelete: Cascade)

	channelId Int
	channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
}
