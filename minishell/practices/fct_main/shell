/*
 * this code is a example to explain the mecanism simplified
 * in which shell execute programs.
 */
#include <unistd.h> //fork
#include <stdio.h> //perror
#include <stdlib.h>//exit
#include <sys/wait.h>//wait
#include <string.h> //strcat

int main(int ac, char **av, char **env)
{
	pid_t pid;

	if (ac > 1)
	{
		switch (pid = fork()) {
			case -1:
				perror("fork failed");
				exit (1);
				break;
			case 0:
				printf("** exec (child process)\n");
				char path[100] = "/bin/";
				strcat(path, av[1]); // ex: /bin/ls
				execve(path, av + 1, env);
				perror("exec failed");
				exit (1);
				break;
			default:
				printf("** wait && exit (parent process)\n");
				wait((int *)0);
				printf("cmd(%s) completed\n", av[1]);
				exit (0);
		}
	}
}